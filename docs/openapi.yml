openapi: 3.1.0
info:
  title: Bank REST Test Assignment
  description: |-
    API specification for a bank cards web service.
    
    Features:
    - Bank cards CRUD with filters & pagination
    - Card operations (activating, blocking, transfers)
    - JWT authorization with access & refresh tokens
  version: 1.0.0
servers:
  - url: https://localhost:8443/api/v1
tags:
  - name: Authentication
    description: Registration, authentication & identification
  - name: Cards
    description: Card operations
  - name: Users
    description: User operations
  - name: Block requests
    description: Block request operations

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Registration
      description: Register a new user and get access & refresh tokens.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        200:
          description: User registered successfuly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          description: Password is too short or too long
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        409:
          description: Email already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in
      description: Log in and get access & refresh tokens.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: User logged in successfuly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Incorrect email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Get a new access token with refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Generated new access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: Refresh token not found or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out
      description: |-
        Delete user's current refresh token requiring logging in
        for future refreshes. Access token still can be used
        for operations until it is expired.
        If no refresh token is found,
        operation will still be considered successful.
      operationId: invalidateRefreshToken
      security:
        - bearerAuth: []
      responses:
        204:
          description: Successful operation
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get user info
      description: Get current user's email & role.
      operationId: selfCheck
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /cards:
    get:
      tags:
        - Cards
      summary: Get list of cards
      description: |-
        Get a list of bank cards using filters and pagination.
        Users see only their cards. Admins see all cards.
      operationId: getCards
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Number of the page. Default is 0.
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          description: Size of the page. Default is 10.
          required: false
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          description: |-
            Name of the field by which the sorting is going to be applied
            with an optional direction. Can be used multiple times to
            apply sorting by multiple fields. Default sorting is by id with
            ascending direction.
            Possible options: {id, userId, last4, cardholderName,
            expirationMonth, expirationYear, status, balance}
          required: false
          schema:
            type: string
            example: "id,asc"
        - name: userId
          in: query
          description: Filter for the user id field (exact match)
          required: false
          schema:
            type: integer
            format: int64
            example: 1
        - name: userId_gt
          in: query
          description: Filter for the user id field (greater than)
          required: false
          schema:
            type: integer
            format: int64
            example: 1
        - name: userId_lt
          in: query
          description: Filter for the user id field (less than)
          required: false
          schema:
            type: integer
            format: int64
            example: 1
        - name: cardholderName
          in: query
          description: Filter for the cardholder name field (exact match).
          required: false
          schema:
            type: string
            example: "ROBERT%20MARTIN"
        - name: cardholderName_like
          in: query
          description: Filter for the cardholder name field (by substring)
          required: false
          schema:
            type: string
            example: "ROBERT"
        - name: last4
          in: query
          description: Filter for the last 4 digits of the card number (exact match)
          required: false
          schema:
            type: string
            example: "0123"
        - name: last4_gt
          in: query
          description: Filter for the last 4 digits of the card number (greater than)
          required: false
          schema:
            type: string
            example: "0123"
        - name: last4_lt
          in: query
          description: Filter for the last 4 digits of the card number (less than)
          required: false
          schema:
            type: string
            example: "0123"
        - name: last4_like
          in: query
          description: Filter for the last 4 digits of the card number (by entry)
          required: false
          schema:
            type: string
            example: "07"
        - name: expirationMonth
          in: query
          description: Filter for the expiration month field (exact match)
          required: false
          schema:
            type: integer
            format: int16
            example: 5
        - name: expirationMonth_gt
          in: query
          description: Filter for the expiration month field (greater than)
          required: false
          schema:
            type: integer
            format: int16
            example: 5
        - name: expirationMonth_lt
          in: query
          description: Filter for the expiration month field (less than)
          required: false
          schema:
            type: integer
            format: int16
            example: 5
        - name: expirationYear
          in: query
          description: Filter for the expiration year field (exact match)
          required: false
          schema:
            type: integer
            format: int16
            example: 2026
        - name: expirationYear_gt
          in: query
          description: Filter for the expiration year field (greater than)
          required: false
          schema:
            type: integer
            format: int16
            example: 2026
        - name: expirationYear_lt
          in: query
          description: Filter for the expiration year field (less than)
          required: false
          schema:
            type: integer
            format: int16
            example: 2026
        - name: status
          in: query
          description: Filter for the card status field
          required: false
          schema:
            type: string
            enum:
              - CREATED
              - ACTIVE
              - BLOCKED
              - EXPIRED
      responses:
        200:
          description: Sucessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
        400:
          description: Bad query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    post:
      tags:
        - Cards
      summary: Create card
      description: Create a new bank card. Available only to ROLE_ADMIN.
      operationId: createCard
      security:
        - bearerAuth: [ROLE_ADMIN]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
        required: true
      responses:
        201:
          description: Card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
          headers:
            Location:
              description: URL of the created card
              schema:
                type: string
                example: "/cards/1"
        400:
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /cards/{id}:
    put:
      tags:
        - Cards
      summary: Update card
      description: Update a bank card. Available only to ROLE_ADMIN.
      operationId: updateCard
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
        required: true
      responses:
        200:
          description: Card updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        400:
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    get:
      tags:
        - Cards
      summary: Get card
      description: Get a bank card by id.
      operationId: getCard
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Card is not owned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    delete:
      tags:
        - Cards
      summary: Delete card
      description: Delete a bank card by id. Available only to ROLE_ADMIN.
      operationId: deleteCard
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        204:
          description: Successful operation
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /cards/{id}/activate:
    post:
      tags:
        - Cards
      summary: Activate card
      description: Activate a bank card by id. Available only to ROLE_ADMIN.
      operationId: activateCard
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        409:
          description: Card is already activated or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /cards/{id}/block-request:
    post:
      tags:
        - Cards
      summary: Request card blocking
      description: Post a ticket with a blocking request for a card by id.
      operationId: cardBlockRequest
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        204:
          description: Block request created
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Card is not owned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /cards/{id}/balance:
    get:
      tags:
        - Cards
      summary: Get card balance
      description: Get the balance of the bank card by id.
      operationId: getBalance
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        200:
          description: Successul operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Card is not owned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /cards/balance:
    get:
      tags:
        - Cards
      summary: Get total card balance
      description: Get the balance of all bank cards owned by user.
      operationId: getTotalBalance
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successul operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalBalanceResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User does not own any cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /cards/transfer:
    post:
      tags:
        - Cards
      summary: Transfer between cards
      description: Perform a transfer between two owned bank cards.
      operationId: transfer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        200:
          description: Successul operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  fromCard:
                    $ref: '#/components/schemas/BalanceResponse'
                  toCard:
                    $ref: '#/components/schemas/BalanceResponse'
        400:
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        402:
          description: Insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: One or both cards are not owned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: One or both cards not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        409:
          description: Same card transfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /block-requests:
    get:
      tags:
        - Block requests
      summary: Get block requests
      description: |-
        Get a list of bank card blocking requests.
        Available only to ROLE_ADMIN.
      operationId: getBlockRequests
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: pending
          in: query
          description: Whether or not to show only pending requests. Default is true
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Number of the page. Default is 0.
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          description: Size of the page. Default is 10.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /block-requests/{id}:
    get:
      tags:
        - Block requests
      summary: Get block request
      description: |-
        Get a bank card blocking request by id.
        Available only to ROLE_ADMIN.
      operationId: getBlockRequest
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestTicket'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Block request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    post:
      tags:
        - Block requests
      summary: Approve block request
      description: |-
        Approve a bank card blocking request by id.
        Available only to ROLE_ADMIN.
      operationId: approveBlockRequest
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestTicket'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Block request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        409:
          description: Request already resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    delete:
      tags:
        - Block requests
      summary: Reject block request
      description: |-
        Reject a bank card blocking request by id.
        Available only to ROLE_ADMIN.
      operationId: rejectBlockRequest
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestTicket'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Block request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        409:
          description: Request already resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /users:
    get:
      tags:
        - Users
      summary: Get users
      description: |-
        Get a list of users using filters and pagination.
        Available only to ROLE_ADMIN.
      operationId: getUsers
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: page
          in: query
          description: Number of the page. Default is 0.
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          description: Size of the page. Default is 10.
          required: false
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          description: |-
            Name of the field by which the sorting is going to be applied
            with an optional direction. Can be used multiple times to
            apply sorting by multiple fields. Default sorting is by id with
            ascending direction.
            Possible options: {id, firstName, lastName, email}
          required: false
          schema:
            type: string
            example: "id,asc"
        - name: firstName
          in: query
          description: Filter for the first name field (exact match)
          schema:
            type: string
            example: "ROBERT"
        - name: firstName_like
          in: query
          description: Filter for the first name field (by substring)
          schema:
            type: string
            example: "ROB"
        - name: lastName
          in: query
          description: Filter for the last name field (exact match)
          schema:
            type: string
            example: "MARTIN"
        - name: lastName_like
          in: query
          description: Filter for the last name field (by substring)
          schema:
            type: string
            example: "TIN"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /users/{id}:
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a userd by id. Available only to ROLE_ADMIN.
      operationId: deleteUser
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        204:
          description: Successful operation
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    put:
      tags:
        - Users
      summary: Update user
      description: Update a userd by id. Available only to ROLE_ADMIN.
      operationId: updateUser
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        409:
          description: Email already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
    get:
      tags:
        - Users
      summary: Get user
      description: Get a user by id. Available only to ROLE_ADMIN.
      operationId: getUser
      security:
        - bearerAuth: [ROLE_ADMIN]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        403:
          description: Insufficient privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AppError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        messages:
          type: array
          items:
              type: string
        timestamp:
          type: string
          format: date-time

    RegistrationRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "Robert"
        lastName:
          type: string
          example: "Martin"
        email:
          type: string
          example: "example@gmail.com"
        password:
          type: string
          description: 8-128 characters
          example: "p4sswORD_"
      required:
        - firstName
        - lastName
        - email
        - password

    AuthRequest:
      type: object
      properties:
        email:
          type: string
          example: "example@gmail.com"
        password:
          type: string
          description: 8-128 characters
          example: "p4sswORD_"
      required:
        - email
        - password

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: UUID refresh token

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          example: "Robert"
        lastName:
          type: string
          example: "Martin"
        email:
          type: string
          example: "example@gmail.com"
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_USER
              - ROLE_ADMIN
            example: "ROLE_USER"

    CardRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
          example: 1234123412341234
        cardholderName:
          type: string
          example: "ROBERT MARTIN"
        expirationMonth:
          type: integer
          format: int16
        expirationYear:
          type: integer
          format: int16
      required:
        - userId
        - number
        - cardholderName
        - expirationMonth
        - expirationYear

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        number:
          type: string
          example: "**** **** **** 1234"
        cardholderName:
          type: string
          example: "ROBERT MARTIN"
        expirationMonth:
          type: integer
          format: int16
          example: 11
        expirationYear:
          type: integer
          format: int16
          example: 2028
        status:
          type: string
          enum:
            - CREATED
            - ACTIVE
            - BLOCKED
            - EXPIRED

    PageResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        page:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64

    BlockRequestTicket:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        card:
          $ref: '#/components/schemas/CardResponse'
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED

    BalanceResponse:
      type: object
      properties:
        number:
          type: string
          example: "**** **** **** 1234"
        balance:
          type: number
          format: float
          example: 13.37

    TotalBalanceResponse:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/BalanceResponse'
        totalBalance:
          type: number
          format: float
          example: 13.37

    TransferRequest:
      type: object
      properties:
        fromId:
          type: integer
          format: int64
        toId:
          type: integer
          format: int64
        amount:
          type: number
          format: float
          example: 13.37
      required:
        - fromId
        - toId
        - amount

    UserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Robert
        lastName:
          type: string
          example: Martin
        email:
          type: string
          example: "example@gmail.com"
        role:
          type: string
          enum:
            - ROLE_USER
            - ROLE_ADMIN